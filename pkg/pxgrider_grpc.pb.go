// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: proto/pxgrider.proto

package pxgrider_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PxgriderService_CheckFQDN_FullMethodName                    = "/pxgrider_proto.PxgriderService/CheckFQDN"
	PxgriderService_GetConnections_FullMethodName               = "/pxgrider_proto.PxgriderService/GetConnections"
	PxgriderService_GetConnectionsTotal_FullMethodName          = "/pxgrider_proto.PxgriderService/GetConnectionsTotal"
	PxgriderService_CreateConnection_FullMethodName             = "/pxgrider_proto.PxgriderService/CreateConnection"
	PxgriderService_GetConnection_FullMethodName                = "/pxgrider_proto.PxgriderService/GetConnection"
	PxgriderService_UpdateConnection_FullMethodName             = "/pxgrider_proto.PxgriderService/UpdateConnection"
	PxgriderService_DeleteConnection_FullMethodName             = "/pxgrider_proto.PxgriderService/DeleteConnection"
	PxgriderService_RefreshConnection_FullMethodName            = "/pxgrider_proto.PxgriderService/RefreshConnection"
	PxgriderService_GetAllSubscriptions_FullMethodName          = "/pxgrider_proto.PxgriderService/GetAllSubscriptions"
	PxgriderService_GetSubscription_FullMethodName              = "/pxgrider_proto.PxgriderService/GetSubscription"
	PxgriderService_SubscribeConnection_FullMethodName          = "/pxgrider_proto.PxgriderService/SubscribeConnection"
	PxgriderService_UnsubscribeConnection_FullMethodName        = "/pxgrider_proto.PxgriderService/UnsubscribeConnection"
	PxgriderService_GetConnectionMessages_FullMethodName        = "/pxgrider_proto.PxgriderService/GetConnectionMessages"
	PxgriderService_MarkConnectionMessagesAsRead_FullMethodName = "/pxgrider_proto.PxgriderService/MarkConnectionMessagesAsRead"
	PxgriderService_DeleteConnectionMessages_FullMethodName     = "/pxgrider_proto.PxgriderService/DeleteConnectionMessages"
	PxgriderService_GetConnectionLogs_FullMethodName            = "/pxgrider_proto.PxgriderService/GetConnectionLogs"
	PxgriderService_DeleteConnectionLogs_FullMethodName         = "/pxgrider_proto.PxgriderService/DeleteConnectionLogs"
	PxgriderService_GetConnectionServices_FullMethodName        = "/pxgrider_proto.PxgriderService/GetConnectionServices"
	PxgriderService_GetConnectionService_FullMethodName         = "/pxgrider_proto.PxgriderService/GetConnectionService"
	PxgriderService_GetServiceMethods_FullMethodName            = "/pxgrider_proto.PxgriderService/GetServiceMethods"
	PxgriderService_CallServiceMethod_FullMethodName            = "/pxgrider_proto.PxgriderService/CallServiceMethod"
	PxgriderService_ServiceLookup_FullMethodName                = "/pxgrider_proto.PxgriderService/ServiceLookup"
	PxgriderService_ServiceUpdateSecrets_FullMethodName         = "/pxgrider_proto.PxgriderService/ServiceUpdateSecrets"
	PxgriderService_ServiceCheckNodes_FullMethodName            = "/pxgrider_proto.PxgriderService/ServiceCheckNodes"
	PxgriderService_GetConnectionTopics_FullMethodName          = "/pxgrider_proto.PxgriderService/GetConnectionTopics"
	PxgriderService_GetServiceTopics_FullMethodName             = "/pxgrider_proto.PxgriderService/GetServiceTopics"
	PxgriderService_RefreshAccountState_FullMethodName          = "/pxgrider_proto.PxgriderService/RefreshAccountState"
)

// PxgriderServiceClient is the client API for PxgriderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PxgriderServiceClient interface {
	CheckFQDN(ctx context.Context, in *CheckFQDNRequest, opts ...grpc.CallOption) (*CheckFQDNResponse, error)
	GetConnections(ctx context.Context, in *GetConnectionsRequest, opts ...grpc.CallOption) (*GetConnectionsResponse, error)
	GetConnectionsTotal(ctx context.Context, in *GetConnectionsTotalRequest, opts ...grpc.CallOption) (*GetConnectionsTotalResponse, error)
	CreateConnection(ctx context.Context, in *CreateConnectionRequest, opts ...grpc.CallOption) (*CreateConnectionResponse, error)
	GetConnection(ctx context.Context, in *GetConnectionRequest, opts ...grpc.CallOption) (*GetConnectionResponse, error)
	UpdateConnection(ctx context.Context, in *UpdateConnectionRequest, opts ...grpc.CallOption) (*UpdateConnectionResponse, error)
	DeleteConnection(ctx context.Context, in *DeleteConnectionRequest, opts ...grpc.CallOption) (*DeleteConnectionResponse, error)
	RefreshConnection(ctx context.Context, in *RefreshConnectionRequest, opts ...grpc.CallOption) (*RefreshConnectionResponse, error)
	GetAllSubscriptions(ctx context.Context, in *GetAllSubscriptionsRequest, opts ...grpc.CallOption) (*GetAllSubscriptionsResponse, error)
	GetSubscription(ctx context.Context, in *GetSubscriptionRequest, opts ...grpc.CallOption) (*GetSubscriptionResponse, error)
	SubscribeConnection(ctx context.Context, in *SubscribeConnectionRequest, opts ...grpc.CallOption) (*SubscribeConnectionResponse, error)
	UnsubscribeConnection(ctx context.Context, in *UnsubscribeConnectionRequest, opts ...grpc.CallOption) (*UnsubscribeConnectionResponse, error)
	GetConnectionMessages(ctx context.Context, in *GetConnectionMessagesRequest, opts ...grpc.CallOption) (*GetConnectionMessagesResponse, error)
	MarkConnectionMessagesAsRead(ctx context.Context, in *MarkConnectionMessagesAsReadRequest, opts ...grpc.CallOption) (*MarkConnectionMessagesAsReadResponse, error)
	DeleteConnectionMessages(ctx context.Context, in *DeleteConnectionMessagesRequest, opts ...grpc.CallOption) (*DeleteConnectionMessagesResponse, error)
	GetConnectionLogs(ctx context.Context, in *GetConnectionLogsRequest, opts ...grpc.CallOption) (*GetConnectionLogsResponse, error)
	DeleteConnectionLogs(ctx context.Context, in *DeleteConnectionLogsRequest, opts ...grpc.CallOption) (*DeleteConnectionLogsResponse, error)
	GetConnectionServices(ctx context.Context, in *GetConnectionServicesRequest, opts ...grpc.CallOption) (*GetConnectionServicesResponse, error)
	GetConnectionService(ctx context.Context, in *GetConnectionServiceRequest, opts ...grpc.CallOption) (*GetConnectionServiceResponse, error)
	GetServiceMethods(ctx context.Context, in *GetServiceMethodsRequest, opts ...grpc.CallOption) (*GetServiceMethodsResponse, error)
	CallServiceMethod(ctx context.Context, in *CallServiceMethodRequest, opts ...grpc.CallOption) (*CallServiceMethodResponse, error)
	ServiceLookup(ctx context.Context, in *ServiceLookupRequest, opts ...grpc.CallOption) (*ServiceLookupResponse, error)
	ServiceUpdateSecrets(ctx context.Context, in *ServiceUpdateSecretsRequest, opts ...grpc.CallOption) (*ServiceUpdateSecretsResponse, error)
	ServiceCheckNodes(ctx context.Context, in *ServiceCheckNodesRequest, opts ...grpc.CallOption) (*ServiceCheckNodesResponse, error)
	GetConnectionTopics(ctx context.Context, in *GetConnectionTopicsRequest, opts ...grpc.CallOption) (*GetConnectionTopicsResponse, error)
	GetServiceTopics(ctx context.Context, in *GetServiceTopicsRequest, opts ...grpc.CallOption) (*GetServiceTopicsResponse, error)
	RefreshAccountState(ctx context.Context, in *RefreshAccountStateRequest, opts ...grpc.CallOption) (*RefreshAccountStateResponse, error)
}

type pxgriderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPxgriderServiceClient(cc grpc.ClientConnInterface) PxgriderServiceClient {
	return &pxgriderServiceClient{cc}
}

func (c *pxgriderServiceClient) CheckFQDN(ctx context.Context, in *CheckFQDNRequest, opts ...grpc.CallOption) (*CheckFQDNResponse, error) {
	out := new(CheckFQDNResponse)
	err := c.cc.Invoke(ctx, PxgriderService_CheckFQDN_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pxgriderServiceClient) GetConnections(ctx context.Context, in *GetConnectionsRequest, opts ...grpc.CallOption) (*GetConnectionsResponse, error) {
	out := new(GetConnectionsResponse)
	err := c.cc.Invoke(ctx, PxgriderService_GetConnections_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pxgriderServiceClient) GetConnectionsTotal(ctx context.Context, in *GetConnectionsTotalRequest, opts ...grpc.CallOption) (*GetConnectionsTotalResponse, error) {
	out := new(GetConnectionsTotalResponse)
	err := c.cc.Invoke(ctx, PxgriderService_GetConnectionsTotal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pxgriderServiceClient) CreateConnection(ctx context.Context, in *CreateConnectionRequest, opts ...grpc.CallOption) (*CreateConnectionResponse, error) {
	out := new(CreateConnectionResponse)
	err := c.cc.Invoke(ctx, PxgriderService_CreateConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pxgriderServiceClient) GetConnection(ctx context.Context, in *GetConnectionRequest, opts ...grpc.CallOption) (*GetConnectionResponse, error) {
	out := new(GetConnectionResponse)
	err := c.cc.Invoke(ctx, PxgriderService_GetConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pxgriderServiceClient) UpdateConnection(ctx context.Context, in *UpdateConnectionRequest, opts ...grpc.CallOption) (*UpdateConnectionResponse, error) {
	out := new(UpdateConnectionResponse)
	err := c.cc.Invoke(ctx, PxgriderService_UpdateConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pxgriderServiceClient) DeleteConnection(ctx context.Context, in *DeleteConnectionRequest, opts ...grpc.CallOption) (*DeleteConnectionResponse, error) {
	out := new(DeleteConnectionResponse)
	err := c.cc.Invoke(ctx, PxgriderService_DeleteConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pxgriderServiceClient) RefreshConnection(ctx context.Context, in *RefreshConnectionRequest, opts ...grpc.CallOption) (*RefreshConnectionResponse, error) {
	out := new(RefreshConnectionResponse)
	err := c.cc.Invoke(ctx, PxgriderService_RefreshConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pxgriderServiceClient) GetAllSubscriptions(ctx context.Context, in *GetAllSubscriptionsRequest, opts ...grpc.CallOption) (*GetAllSubscriptionsResponse, error) {
	out := new(GetAllSubscriptionsResponse)
	err := c.cc.Invoke(ctx, PxgriderService_GetAllSubscriptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pxgriderServiceClient) GetSubscription(ctx context.Context, in *GetSubscriptionRequest, opts ...grpc.CallOption) (*GetSubscriptionResponse, error) {
	out := new(GetSubscriptionResponse)
	err := c.cc.Invoke(ctx, PxgriderService_GetSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pxgriderServiceClient) SubscribeConnection(ctx context.Context, in *SubscribeConnectionRequest, opts ...grpc.CallOption) (*SubscribeConnectionResponse, error) {
	out := new(SubscribeConnectionResponse)
	err := c.cc.Invoke(ctx, PxgriderService_SubscribeConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pxgriderServiceClient) UnsubscribeConnection(ctx context.Context, in *UnsubscribeConnectionRequest, opts ...grpc.CallOption) (*UnsubscribeConnectionResponse, error) {
	out := new(UnsubscribeConnectionResponse)
	err := c.cc.Invoke(ctx, PxgriderService_UnsubscribeConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pxgriderServiceClient) GetConnectionMessages(ctx context.Context, in *GetConnectionMessagesRequest, opts ...grpc.CallOption) (*GetConnectionMessagesResponse, error) {
	out := new(GetConnectionMessagesResponse)
	err := c.cc.Invoke(ctx, PxgriderService_GetConnectionMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pxgriderServiceClient) MarkConnectionMessagesAsRead(ctx context.Context, in *MarkConnectionMessagesAsReadRequest, opts ...grpc.CallOption) (*MarkConnectionMessagesAsReadResponse, error) {
	out := new(MarkConnectionMessagesAsReadResponse)
	err := c.cc.Invoke(ctx, PxgriderService_MarkConnectionMessagesAsRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pxgriderServiceClient) DeleteConnectionMessages(ctx context.Context, in *DeleteConnectionMessagesRequest, opts ...grpc.CallOption) (*DeleteConnectionMessagesResponse, error) {
	out := new(DeleteConnectionMessagesResponse)
	err := c.cc.Invoke(ctx, PxgriderService_DeleteConnectionMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pxgriderServiceClient) GetConnectionLogs(ctx context.Context, in *GetConnectionLogsRequest, opts ...grpc.CallOption) (*GetConnectionLogsResponse, error) {
	out := new(GetConnectionLogsResponse)
	err := c.cc.Invoke(ctx, PxgriderService_GetConnectionLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pxgriderServiceClient) DeleteConnectionLogs(ctx context.Context, in *DeleteConnectionLogsRequest, opts ...grpc.CallOption) (*DeleteConnectionLogsResponse, error) {
	out := new(DeleteConnectionLogsResponse)
	err := c.cc.Invoke(ctx, PxgriderService_DeleteConnectionLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pxgriderServiceClient) GetConnectionServices(ctx context.Context, in *GetConnectionServicesRequest, opts ...grpc.CallOption) (*GetConnectionServicesResponse, error) {
	out := new(GetConnectionServicesResponse)
	err := c.cc.Invoke(ctx, PxgriderService_GetConnectionServices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pxgriderServiceClient) GetConnectionService(ctx context.Context, in *GetConnectionServiceRequest, opts ...grpc.CallOption) (*GetConnectionServiceResponse, error) {
	out := new(GetConnectionServiceResponse)
	err := c.cc.Invoke(ctx, PxgriderService_GetConnectionService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pxgriderServiceClient) GetServiceMethods(ctx context.Context, in *GetServiceMethodsRequest, opts ...grpc.CallOption) (*GetServiceMethodsResponse, error) {
	out := new(GetServiceMethodsResponse)
	err := c.cc.Invoke(ctx, PxgriderService_GetServiceMethods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pxgriderServiceClient) CallServiceMethod(ctx context.Context, in *CallServiceMethodRequest, opts ...grpc.CallOption) (*CallServiceMethodResponse, error) {
	out := new(CallServiceMethodResponse)
	err := c.cc.Invoke(ctx, PxgriderService_CallServiceMethod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pxgriderServiceClient) ServiceLookup(ctx context.Context, in *ServiceLookupRequest, opts ...grpc.CallOption) (*ServiceLookupResponse, error) {
	out := new(ServiceLookupResponse)
	err := c.cc.Invoke(ctx, PxgriderService_ServiceLookup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pxgriderServiceClient) ServiceUpdateSecrets(ctx context.Context, in *ServiceUpdateSecretsRequest, opts ...grpc.CallOption) (*ServiceUpdateSecretsResponse, error) {
	out := new(ServiceUpdateSecretsResponse)
	err := c.cc.Invoke(ctx, PxgriderService_ServiceUpdateSecrets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pxgriderServiceClient) ServiceCheckNodes(ctx context.Context, in *ServiceCheckNodesRequest, opts ...grpc.CallOption) (*ServiceCheckNodesResponse, error) {
	out := new(ServiceCheckNodesResponse)
	err := c.cc.Invoke(ctx, PxgriderService_ServiceCheckNodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pxgriderServiceClient) GetConnectionTopics(ctx context.Context, in *GetConnectionTopicsRequest, opts ...grpc.CallOption) (*GetConnectionTopicsResponse, error) {
	out := new(GetConnectionTopicsResponse)
	err := c.cc.Invoke(ctx, PxgriderService_GetConnectionTopics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pxgriderServiceClient) GetServiceTopics(ctx context.Context, in *GetServiceTopicsRequest, opts ...grpc.CallOption) (*GetServiceTopicsResponse, error) {
	out := new(GetServiceTopicsResponse)
	err := c.cc.Invoke(ctx, PxgriderService_GetServiceTopics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pxgriderServiceClient) RefreshAccountState(ctx context.Context, in *RefreshAccountStateRequest, opts ...grpc.CallOption) (*RefreshAccountStateResponse, error) {
	out := new(RefreshAccountStateResponse)
	err := c.cc.Invoke(ctx, PxgriderService_RefreshAccountState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PxgriderServiceServer is the server API for PxgriderService service.
// All implementations must embed UnimplementedPxgriderServiceServer
// for forward compatibility
type PxgriderServiceServer interface {
	CheckFQDN(context.Context, *CheckFQDNRequest) (*CheckFQDNResponse, error)
	GetConnections(context.Context, *GetConnectionsRequest) (*GetConnectionsResponse, error)
	GetConnectionsTotal(context.Context, *GetConnectionsTotalRequest) (*GetConnectionsTotalResponse, error)
	CreateConnection(context.Context, *CreateConnectionRequest) (*CreateConnectionResponse, error)
	GetConnection(context.Context, *GetConnectionRequest) (*GetConnectionResponse, error)
	UpdateConnection(context.Context, *UpdateConnectionRequest) (*UpdateConnectionResponse, error)
	DeleteConnection(context.Context, *DeleteConnectionRequest) (*DeleteConnectionResponse, error)
	RefreshConnection(context.Context, *RefreshConnectionRequest) (*RefreshConnectionResponse, error)
	GetAllSubscriptions(context.Context, *GetAllSubscriptionsRequest) (*GetAllSubscriptionsResponse, error)
	GetSubscription(context.Context, *GetSubscriptionRequest) (*GetSubscriptionResponse, error)
	SubscribeConnection(context.Context, *SubscribeConnectionRequest) (*SubscribeConnectionResponse, error)
	UnsubscribeConnection(context.Context, *UnsubscribeConnectionRequest) (*UnsubscribeConnectionResponse, error)
	GetConnectionMessages(context.Context, *GetConnectionMessagesRequest) (*GetConnectionMessagesResponse, error)
	MarkConnectionMessagesAsRead(context.Context, *MarkConnectionMessagesAsReadRequest) (*MarkConnectionMessagesAsReadResponse, error)
	DeleteConnectionMessages(context.Context, *DeleteConnectionMessagesRequest) (*DeleteConnectionMessagesResponse, error)
	GetConnectionLogs(context.Context, *GetConnectionLogsRequest) (*GetConnectionLogsResponse, error)
	DeleteConnectionLogs(context.Context, *DeleteConnectionLogsRequest) (*DeleteConnectionLogsResponse, error)
	GetConnectionServices(context.Context, *GetConnectionServicesRequest) (*GetConnectionServicesResponse, error)
	GetConnectionService(context.Context, *GetConnectionServiceRequest) (*GetConnectionServiceResponse, error)
	GetServiceMethods(context.Context, *GetServiceMethodsRequest) (*GetServiceMethodsResponse, error)
	CallServiceMethod(context.Context, *CallServiceMethodRequest) (*CallServiceMethodResponse, error)
	ServiceLookup(context.Context, *ServiceLookupRequest) (*ServiceLookupResponse, error)
	ServiceUpdateSecrets(context.Context, *ServiceUpdateSecretsRequest) (*ServiceUpdateSecretsResponse, error)
	ServiceCheckNodes(context.Context, *ServiceCheckNodesRequest) (*ServiceCheckNodesResponse, error)
	GetConnectionTopics(context.Context, *GetConnectionTopicsRequest) (*GetConnectionTopicsResponse, error)
	GetServiceTopics(context.Context, *GetServiceTopicsRequest) (*GetServiceTopicsResponse, error)
	RefreshAccountState(context.Context, *RefreshAccountStateRequest) (*RefreshAccountStateResponse, error)
	mustEmbedUnimplementedPxgriderServiceServer()
}

// UnimplementedPxgriderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPxgriderServiceServer struct {
}

func (UnimplementedPxgriderServiceServer) CheckFQDN(context.Context, *CheckFQDNRequest) (*CheckFQDNResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckFQDN not implemented")
}
func (UnimplementedPxgriderServiceServer) GetConnections(context.Context, *GetConnectionsRequest) (*GetConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnections not implemented")
}
func (UnimplementedPxgriderServiceServer) GetConnectionsTotal(context.Context, *GetConnectionsTotalRequest) (*GetConnectionsTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectionsTotal not implemented")
}
func (UnimplementedPxgriderServiceServer) CreateConnection(context.Context, *CreateConnectionRequest) (*CreateConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnection not implemented")
}
func (UnimplementedPxgriderServiceServer) GetConnection(context.Context, *GetConnectionRequest) (*GetConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnection not implemented")
}
func (UnimplementedPxgriderServiceServer) UpdateConnection(context.Context, *UpdateConnectionRequest) (*UpdateConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConnection not implemented")
}
func (UnimplementedPxgriderServiceServer) DeleteConnection(context.Context, *DeleteConnectionRequest) (*DeleteConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnection not implemented")
}
func (UnimplementedPxgriderServiceServer) RefreshConnection(context.Context, *RefreshConnectionRequest) (*RefreshConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshConnection not implemented")
}
func (UnimplementedPxgriderServiceServer) GetAllSubscriptions(context.Context, *GetAllSubscriptionsRequest) (*GetAllSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSubscriptions not implemented")
}
func (UnimplementedPxgriderServiceServer) GetSubscription(context.Context, *GetSubscriptionRequest) (*GetSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscription not implemented")
}
func (UnimplementedPxgriderServiceServer) SubscribeConnection(context.Context, *SubscribeConnectionRequest) (*SubscribeConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeConnection not implemented")
}
func (UnimplementedPxgriderServiceServer) UnsubscribeConnection(context.Context, *UnsubscribeConnectionRequest) (*UnsubscribeConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribeConnection not implemented")
}
func (UnimplementedPxgriderServiceServer) GetConnectionMessages(context.Context, *GetConnectionMessagesRequest) (*GetConnectionMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectionMessages not implemented")
}
func (UnimplementedPxgriderServiceServer) MarkConnectionMessagesAsRead(context.Context, *MarkConnectionMessagesAsReadRequest) (*MarkConnectionMessagesAsReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkConnectionMessagesAsRead not implemented")
}
func (UnimplementedPxgriderServiceServer) DeleteConnectionMessages(context.Context, *DeleteConnectionMessagesRequest) (*DeleteConnectionMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnectionMessages not implemented")
}
func (UnimplementedPxgriderServiceServer) GetConnectionLogs(context.Context, *GetConnectionLogsRequest) (*GetConnectionLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectionLogs not implemented")
}
func (UnimplementedPxgriderServiceServer) DeleteConnectionLogs(context.Context, *DeleteConnectionLogsRequest) (*DeleteConnectionLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnectionLogs not implemented")
}
func (UnimplementedPxgriderServiceServer) GetConnectionServices(context.Context, *GetConnectionServicesRequest) (*GetConnectionServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectionServices not implemented")
}
func (UnimplementedPxgriderServiceServer) GetConnectionService(context.Context, *GetConnectionServiceRequest) (*GetConnectionServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectionService not implemented")
}
func (UnimplementedPxgriderServiceServer) GetServiceMethods(context.Context, *GetServiceMethodsRequest) (*GetServiceMethodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceMethods not implemented")
}
func (UnimplementedPxgriderServiceServer) CallServiceMethod(context.Context, *CallServiceMethodRequest) (*CallServiceMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallServiceMethod not implemented")
}
func (UnimplementedPxgriderServiceServer) ServiceLookup(context.Context, *ServiceLookupRequest) (*ServiceLookupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceLookup not implemented")
}
func (UnimplementedPxgriderServiceServer) ServiceUpdateSecrets(context.Context, *ServiceUpdateSecretsRequest) (*ServiceUpdateSecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceUpdateSecrets not implemented")
}
func (UnimplementedPxgriderServiceServer) ServiceCheckNodes(context.Context, *ServiceCheckNodesRequest) (*ServiceCheckNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceCheckNodes not implemented")
}
func (UnimplementedPxgriderServiceServer) GetConnectionTopics(context.Context, *GetConnectionTopicsRequest) (*GetConnectionTopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectionTopics not implemented")
}
func (UnimplementedPxgriderServiceServer) GetServiceTopics(context.Context, *GetServiceTopicsRequest) (*GetServiceTopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceTopics not implemented")
}
func (UnimplementedPxgriderServiceServer) RefreshAccountState(context.Context, *RefreshAccountStateRequest) (*RefreshAccountStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshAccountState not implemented")
}
func (UnimplementedPxgriderServiceServer) mustEmbedUnimplementedPxgriderServiceServer() {}

// UnsafePxgriderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PxgriderServiceServer will
// result in compilation errors.
type UnsafePxgriderServiceServer interface {
	mustEmbedUnimplementedPxgriderServiceServer()
}

func RegisterPxgriderServiceServer(s grpc.ServiceRegistrar, srv PxgriderServiceServer) {
	s.RegisterService(&PxgriderService_ServiceDesc, srv)
}

func _PxgriderService_CheckFQDN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckFQDNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PxgriderServiceServer).CheckFQDN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PxgriderService_CheckFQDN_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PxgriderServiceServer).CheckFQDN(ctx, req.(*CheckFQDNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PxgriderService_GetConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PxgriderServiceServer).GetConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PxgriderService_GetConnections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PxgriderServiceServer).GetConnections(ctx, req.(*GetConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PxgriderService_GetConnectionsTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionsTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PxgriderServiceServer).GetConnectionsTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PxgriderService_GetConnectionsTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PxgriderServiceServer).GetConnectionsTotal(ctx, req.(*GetConnectionsTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PxgriderService_CreateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PxgriderServiceServer).CreateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PxgriderService_CreateConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PxgriderServiceServer).CreateConnection(ctx, req.(*CreateConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PxgriderService_GetConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PxgriderServiceServer).GetConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PxgriderService_GetConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PxgriderServiceServer).GetConnection(ctx, req.(*GetConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PxgriderService_UpdateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PxgriderServiceServer).UpdateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PxgriderService_UpdateConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PxgriderServiceServer).UpdateConnection(ctx, req.(*UpdateConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PxgriderService_DeleteConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PxgriderServiceServer).DeleteConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PxgriderService_DeleteConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PxgriderServiceServer).DeleteConnection(ctx, req.(*DeleteConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PxgriderService_RefreshConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PxgriderServiceServer).RefreshConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PxgriderService_RefreshConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PxgriderServiceServer).RefreshConnection(ctx, req.(*RefreshConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PxgriderService_GetAllSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PxgriderServiceServer).GetAllSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PxgriderService_GetAllSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PxgriderServiceServer).GetAllSubscriptions(ctx, req.(*GetAllSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PxgriderService_GetSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PxgriderServiceServer).GetSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PxgriderService_GetSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PxgriderServiceServer).GetSubscription(ctx, req.(*GetSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PxgriderService_SubscribeConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PxgriderServiceServer).SubscribeConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PxgriderService_SubscribeConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PxgriderServiceServer).SubscribeConnection(ctx, req.(*SubscribeConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PxgriderService_UnsubscribeConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PxgriderServiceServer).UnsubscribeConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PxgriderService_UnsubscribeConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PxgriderServiceServer).UnsubscribeConnection(ctx, req.(*UnsubscribeConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PxgriderService_GetConnectionMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PxgriderServiceServer).GetConnectionMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PxgriderService_GetConnectionMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PxgriderServiceServer).GetConnectionMessages(ctx, req.(*GetConnectionMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PxgriderService_MarkConnectionMessagesAsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkConnectionMessagesAsReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PxgriderServiceServer).MarkConnectionMessagesAsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PxgriderService_MarkConnectionMessagesAsRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PxgriderServiceServer).MarkConnectionMessagesAsRead(ctx, req.(*MarkConnectionMessagesAsReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PxgriderService_DeleteConnectionMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConnectionMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PxgriderServiceServer).DeleteConnectionMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PxgriderService_DeleteConnectionMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PxgriderServiceServer).DeleteConnectionMessages(ctx, req.(*DeleteConnectionMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PxgriderService_GetConnectionLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PxgriderServiceServer).GetConnectionLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PxgriderService_GetConnectionLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PxgriderServiceServer).GetConnectionLogs(ctx, req.(*GetConnectionLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PxgriderService_DeleteConnectionLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConnectionLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PxgriderServiceServer).DeleteConnectionLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PxgriderService_DeleteConnectionLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PxgriderServiceServer).DeleteConnectionLogs(ctx, req.(*DeleteConnectionLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PxgriderService_GetConnectionServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PxgriderServiceServer).GetConnectionServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PxgriderService_GetConnectionServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PxgriderServiceServer).GetConnectionServices(ctx, req.(*GetConnectionServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PxgriderService_GetConnectionService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PxgriderServiceServer).GetConnectionService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PxgriderService_GetConnectionService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PxgriderServiceServer).GetConnectionService(ctx, req.(*GetConnectionServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PxgriderService_GetServiceMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceMethodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PxgriderServiceServer).GetServiceMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PxgriderService_GetServiceMethods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PxgriderServiceServer).GetServiceMethods(ctx, req.(*GetServiceMethodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PxgriderService_CallServiceMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallServiceMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PxgriderServiceServer).CallServiceMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PxgriderService_CallServiceMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PxgriderServiceServer).CallServiceMethod(ctx, req.(*CallServiceMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PxgriderService_ServiceLookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceLookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PxgriderServiceServer).ServiceLookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PxgriderService_ServiceLookup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PxgriderServiceServer).ServiceLookup(ctx, req.(*ServiceLookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PxgriderService_ServiceUpdateSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceUpdateSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PxgriderServiceServer).ServiceUpdateSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PxgriderService_ServiceUpdateSecrets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PxgriderServiceServer).ServiceUpdateSecrets(ctx, req.(*ServiceUpdateSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PxgriderService_ServiceCheckNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceCheckNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PxgriderServiceServer).ServiceCheckNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PxgriderService_ServiceCheckNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PxgriderServiceServer).ServiceCheckNodes(ctx, req.(*ServiceCheckNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PxgriderService_GetConnectionTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PxgriderServiceServer).GetConnectionTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PxgriderService_GetConnectionTopics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PxgriderServiceServer).GetConnectionTopics(ctx, req.(*GetConnectionTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PxgriderService_GetServiceTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PxgriderServiceServer).GetServiceTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PxgriderService_GetServiceTopics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PxgriderServiceServer).GetServiceTopics(ctx, req.(*GetServiceTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PxgriderService_RefreshAccountState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshAccountStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PxgriderServiceServer).RefreshAccountState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PxgriderService_RefreshAccountState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PxgriderServiceServer).RefreshAccountState(ctx, req.(*RefreshAccountStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PxgriderService_ServiceDesc is the grpc.ServiceDesc for PxgriderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PxgriderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pxgrider_proto.PxgriderService",
	HandlerType: (*PxgriderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckFQDN",
			Handler:    _PxgriderService_CheckFQDN_Handler,
		},
		{
			MethodName: "GetConnections",
			Handler:    _PxgriderService_GetConnections_Handler,
		},
		{
			MethodName: "GetConnectionsTotal",
			Handler:    _PxgriderService_GetConnectionsTotal_Handler,
		},
		{
			MethodName: "CreateConnection",
			Handler:    _PxgriderService_CreateConnection_Handler,
		},
		{
			MethodName: "GetConnection",
			Handler:    _PxgriderService_GetConnection_Handler,
		},
		{
			MethodName: "UpdateConnection",
			Handler:    _PxgriderService_UpdateConnection_Handler,
		},
		{
			MethodName: "DeleteConnection",
			Handler:    _PxgriderService_DeleteConnection_Handler,
		},
		{
			MethodName: "RefreshConnection",
			Handler:    _PxgriderService_RefreshConnection_Handler,
		},
		{
			MethodName: "GetAllSubscriptions",
			Handler:    _PxgriderService_GetAllSubscriptions_Handler,
		},
		{
			MethodName: "GetSubscription",
			Handler:    _PxgriderService_GetSubscription_Handler,
		},
		{
			MethodName: "SubscribeConnection",
			Handler:    _PxgriderService_SubscribeConnection_Handler,
		},
		{
			MethodName: "UnsubscribeConnection",
			Handler:    _PxgriderService_UnsubscribeConnection_Handler,
		},
		{
			MethodName: "GetConnectionMessages",
			Handler:    _PxgriderService_GetConnectionMessages_Handler,
		},
		{
			MethodName: "MarkConnectionMessagesAsRead",
			Handler:    _PxgriderService_MarkConnectionMessagesAsRead_Handler,
		},
		{
			MethodName: "DeleteConnectionMessages",
			Handler:    _PxgriderService_DeleteConnectionMessages_Handler,
		},
		{
			MethodName: "GetConnectionLogs",
			Handler:    _PxgriderService_GetConnectionLogs_Handler,
		},
		{
			MethodName: "DeleteConnectionLogs",
			Handler:    _PxgriderService_DeleteConnectionLogs_Handler,
		},
		{
			MethodName: "GetConnectionServices",
			Handler:    _PxgriderService_GetConnectionServices_Handler,
		},
		{
			MethodName: "GetConnectionService",
			Handler:    _PxgriderService_GetConnectionService_Handler,
		},
		{
			MethodName: "GetServiceMethods",
			Handler:    _PxgriderService_GetServiceMethods_Handler,
		},
		{
			MethodName: "CallServiceMethod",
			Handler:    _PxgriderService_CallServiceMethod_Handler,
		},
		{
			MethodName: "ServiceLookup",
			Handler:    _PxgriderService_ServiceLookup_Handler,
		},
		{
			MethodName: "ServiceUpdateSecrets",
			Handler:    _PxgriderService_ServiceUpdateSecrets_Handler,
		},
		{
			MethodName: "ServiceCheckNodes",
			Handler:    _PxgriderService_ServiceCheckNodes_Handler,
		},
		{
			MethodName: "GetConnectionTopics",
			Handler:    _PxgriderService_GetConnectionTopics_Handler,
		},
		{
			MethodName: "GetServiceTopics",
			Handler:    _PxgriderService_GetServiceTopics_Handler,
		},
		{
			MethodName: "RefreshAccountState",
			Handler:    _PxgriderService_RefreshAccountState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/pxgrider.proto",
}
